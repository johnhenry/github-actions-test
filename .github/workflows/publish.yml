name: Publish Workflow
on:
  push:
    branches:
    - master
jobs:
  Publish_Workflow:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v1.0.0
    - name: Prepare repository
      run: git checkout "${GITHUB_REF:11}"
    - name: Extract version
      id: extract_version
      run: |
        sudo apt-get install -y jq 
        echo "::set-output name=version::$(cat package.json | jq -r ".version")"
        echo "::set-output name=new_version::$(cat .VERSION)"
      env:
        VERSION: ${{ steps.extract_version.outputs.version }}
        NEW_VERSION: ${{ steps.extract_version.outputs.new_version }}
    - name: publish
      if: steps.extract_version.outputs.version != steps.extract_version.outputs.new_version
      env:
        VERSION: ${{ steps.extract_version.outputs.version }}
        NEW_VERSION: ${{ steps.extract_version.outputs.new_version }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      run: |
        sudo apt-get install -y jq 
        curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -
sudo apt-get install -y nodejs
        npm install -g np 
        # https://gist.github.com/maxrimue/ca69ee78081645e1ef62
        UPDATE='NO UPDATE'
        version1=${VERSION//./ }
        version2=${NEW_VERSION//./ }
        patch1=$(echo $version1 | awk '{print $3}')
        minor1=$(echo $version1 | awk '{print $2}')
        major1=$(echo $version1 | awk '{print $1}')
        patch2=$(echo $version2 | awk '{print $3}')
        minor2=$(echo $version2 | awk '{print $2}')
        major2=$(echo $version2 | awk '{print $1}')
        if [ $patch1 -lt $patch2 ]; then
            UPDATE='PATCH'
        fi
        if [ $minor1 -lt $minor2 ]; then
            UPDATE='MINOR'
        fi
        if [ $major1 -lt $major2 ]; then
            UPDATE='MAJOR'
        fi
        echo "//registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN" >> ~/.npmrc

        git config --global user.name '(none)' && git config --global user.email 'noreply@github.com' && git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
        npm install
        npm run build:dist
        npm run build:readme
        git add dist
        git add package-lock.json
        git add readme.md
        git commit -n -m "Built dist for $NEW_VERSION"
        echo "$VERSION => $NEW_VERSION ($UPDATE)"

        np $NEW_VERSION
        git push origin master
        git push --tags origin master
